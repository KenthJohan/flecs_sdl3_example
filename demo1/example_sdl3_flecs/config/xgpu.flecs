@color #FF99FF
xgpu {}
module xgpu

gpu0 {
	eg.gpu.DeviceCreateInfo : {
		debug: true,
	}

	eg.gpu.DeviceDebug : {
		max.windows: 1,
		max.textures: 1,
		max.buffers: 3,
		max.shaders: 2,
		max.pipelines: 1,
	}

	tex_depth {}
	tex_depth2 {}

	window1 {
		eg.windows.WindowCreateInfo : {debug: true}
		eg.base.Update
		eg.shapes.Rectangle
		eg.spatials.Position2
		mouse1 {
			eg.windows.Mouse
			eg.spatials.Position2
		}
		//(eg.windows.EventResize, tex_depth)
		//(eg.windows.EventResize, tex_depth2)
	}

	@brief "shaders/cube"
	shader_fragment {
		eg.gpu.ShaderFragmentCreateInfo : {stage: 0}
	}

	@brief "shaders/cube"
	shader_vertex {
		eg.gpu.ShaderVertexCreateInfo : {stage: 1}
	}


	pipeline {
		(flecs.core.DependsOn, xvertex.Vertex123)
		eg.gpu.PipelineCreateInfo : {
			sample_count:0, 
			target_info_has_depth_stencil_target:true
		}
		(flecs.core.DependsOn, shader_fragment)
		(flecs.core.DependsOn, shader_vertex)
	}

	tex_depth {
		eg.gpu.TextureCreateInfo : {sample_count:0}
		(flecs.core.DependsOn, window1)
	}
	
	vbuf0 {
		eg.gpu.BufferCreateInfo : {is_vertex:true, cap: 1024*24}
		g0 {
			eg.base.Update
			(flecs.core.DependsOn, xmeshes.m1)
		}
	}

	ibuf0 {
		eg.gpu.BufferCreateInfo : {is_index:true, cap: 1024*24}
		g0 {
			eg.base.Update
			(flecs.core.DependsOn, xmeshes.m1)
		}
	}

	tbuf0 {
		eg.gpu.BufferCreateInfo : {is_transfer:true, cap: 1024*24}
		cmds {
			cmd0 {
				(flecs.core.DependsOn, vbuf0)
				(flecs.core.DependsOn, ibuf0)
				(flecs.core.DependsOn, xmeshes.m1)
			}
		}
	}



}

/*
Work in progress.
The goal is to have ability to send commands from CPU flecs to GPU.
For example:
	* To send a command to copy data from CPU vertex buffer to GPU vertex buffer.
	* To send a command to copy data from CPU index buffer to GPU index buffer.
	* To send a command to copy data from CPU texture to GPU texture.
*/
aaa {
	eg.gpu.Texture
	cmd1 {
		
	}
}